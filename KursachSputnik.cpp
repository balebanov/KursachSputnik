#include <iostream>
#include <cstdio>
#include <cmath>
#include <Windows.h>
#include "GLOEphemeris.h"

const double MU = 398600.44; // мю [км3/с2]
const double R_e = 6378.136; // радиус Земли Rэ [км]
const double C20 = -1082.64e-6; // коэффициент С20 [б/р]
const double w_e = 0.7292115e-4; // омега_з - угловая скорость вращения земли [рад/с]
GLOEphemeris R4, R5, R6, R13, R14, R19, R20, R21, R22; // эфемериды в первой точке
void setUpFirstEphemeris(); // присвоение значений эфемеридам в первой точке

int main()
{
	setUpFirstEphemeris();
	
	// Вариант работы R1.5
	const double T_reciever = 79090.0; // время приемника [сек]
	const int numberNKA[9] = { 4, 5, 6, 13, 14, 19, 20, 21, 22 }; // номера КА (НКА)
	GLOEphemeris arr[9] = { R4, R5, R6, R13, R14, R19, R20, R21, R22 };

	double t_ka[9]; // время на КА
	double t_pr[9]; // время предшествия по шкале МДВ
	double r_pdelay[9]; // массив с псевдозадержками

	r_pdelay[0] = 0.073222357522417;
	r_pdelay[1] = 0.063967380775665;
	r_pdelay[2] = 0.070070196355748;
	r_pdelay[3] = 0.076219910836493;
	r_pdelay[4] = 0.078505425273430;
	r_pdelay[5] = 0.076957772011003;
	r_pdelay[6] = 0.065268666107175;
	r_pdelay[7] = 0.066034261800248;
	r_pdelay[8] = 0.078249788524393;
	
	// Вычисление времени предшествия t_pr по шкале МДВ
	
	for (int i = 0; i < 9; i++) {
		t_ka[i] = T_reciever - r_pdelay[i];
		// std::cout << "t_ka[" << numberNKA[i] << "] = " << std::fixed << t_ka[i] << " sec" << std::endl;
	}
	
	// std::cout << std::endl << std::endl;

	for (int i = 0; i < 9; i++) {
		double t_pr_body = t_ka[i] + arr[i].tauSys + arr[i].tau - (arr[i].gamma * (t_ka[i] - arr[i].tb));
		t_pr[i] = fmod(t_pr_body, 86400); // показания спутниковых часов на момент предшествия (T_МДВ)
		std::cout << "t_pr[" << numberNKA[i] << "] = " << std::fixed << t_pr[i] << " sec" << std::endl;
	}

	// std::cout << std::endl << std::endl;

	// Вычисление координат и составляющих вектора скорости спутников
	//  for (int i = 0; i < 9; i++) {
	//	  std::cout << "[" << numberNKA[i] << "]: T_MDV = " << t_pr[i] << " sec; tb = " << arr[i].tb << " sec;" << std::endl;
	//  }
	
	std::cout << std::endl << "Integration step h > 0" << std::endl << std::endl;

	// Задаем компоненты вектора s для каждого спутника 
	double s[9][6]; // 9 - число спутников, 6 число составляющих
	std::cout << "s[0][i] before intergation: " << std::endl << std::endl;

	for (int i = 0; i < 9; i++) {
		s[i][0] = arr[i].r[0];
		s[i][1] = arr[i].r[1];
		s[i][2] = arr[i].r[2];
		s[i][3] = arr[i].v[0]; 
		s[i][4] = arr[i].v[1];
		s[i][5] = arr[i].v[2];
	}
	
	double h = 10.; // шаг интегрирования [с]
	double t_i = arr[0].tb; // у всех спутников параметр tb - одинаковый
	
	// Попробуем сделать один цикл интегрирования для спутника R4
	for (int i = 0; i < 6; i++) {
		std::cout << "s[0][" << i << "] = " << s[0][i] << std::endl; // до интегрирования
	}

	double n = (t_pr[0] - t_i) / h; 
	std::cout << std::endl << "Number of integration steps: " << int(n) << std::endl;

	double arg[6], f[6];
	// while (t_i < t_pr[0]) { // перебегает, 79090
	for(int i = 0; i < int(n); i++) { // не перебегает
		
		for (int i = 0; i < 6; i++) arg[i] = s[0][i]; // arg_i = s_i
		double r = sqrt(arg[0] * arg[0] + arg[1] * arg[1] + arg[2] * arg[2]);
		double A = MU / r;
		f[0] = arg[3]; 
		f[1] = arg[4]; 
		f[2] = arg[5];
		f[3] = (w_e * w_e - A) * arg[0] + 2 * w_e * arg[4] + 1.5 * C20 * MU * R_e * R_e / pow(r, 5) * arg[0] * (1 - (5 * arg[2] * arg[2] / r * r)) + R4.w[0];
		f[4] = (w_e * w_e - A) * arg[1] + 2 * w_e * arg[3] + 1.5 * C20 * MU * R_e * R_e / pow(r, 5) * arg[1] * (1 - (5 * arg[2] * arg[2] / r * r)) + R4.w[1];
		f[5] = -A * arg[2] + 1.5 * C20 * MU * R_e * R_e / pow(r, 5) * arg[2] * (3 - (5 * arg[2] * arg[2] / r * r)) + R4.w[2];

		double k1[6], k2[6], k3[6], k4[6];
		for (int i = 0; i < 6; i++) {
			k1[i] = h * f[i]; // k1_i= h*f_i
			arg[i] = s[0][i] + 0.5 * k1[i]; // arg_i = s_i + 0.5*k1_i
		// }
		// for (int i = 0; i < 6; i++) {
			k2[i] = h * f[i]; // k2_i = h*f_i
			arg[i] = s[0][i] + 0.5 * k2[i]; // arg_i = s_i + 0.5*k2_i
		// }
		// for (int i = 0; i < 6; i++) {
			k3[i] = h * f[i]; // k3_i = h*f_i
			arg[i] = s[0][i] + k3[i]; // arg_i = s_i + k3_i
		// }
		// for (int i = 0; i < 6; i++) {
			k4[i] = h * f[i]; // k4_i = h*f_i
			arg[i] = s[0][i] + k4[i]; // arg_i = s_i + k4_i
		}
		double d_s[6];
		for (int i = 0; i < 6; i++) d_s[i] = (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6;
		for (int i = 0; i < 6; i++) s[0][i] = s[0][i] + d_s[i];
		t_i = t_i + h;
	}

	for (int i = 0; i < 6; i++) {
		std::cout << "s[0][" << i << "] = " << s[0][i] << std::endl;
	}
	std::cout << "t_i = " << t_i << std::endl;
	// все равно какая-то неправильная херня

	return 0;
}

void setUpFirstEphemeris() {
	// R4
	R4.sv = 4;
	R4.frqNum = 6;
	R4.dne = 578;
	R4.tk = 77400;
	R4.tb = 78300;
	R4.health = 0;
	R4.age = 0;
	R4.flags = 141;
	R4.r[0] = -7976.099121093750000;
	R4.r[1] = 10250.142089843750000;
	R4.r[2] = 21974.189941406250000;
	R4.v[0] = -3.003422737121582;
	R4.v[1] = -0.023105621337891;
	R4.v[2] = -1.081212043762207;
	R4.w[0] = -0.000000001862645;
	R4.w[1] = -0.000000000931323;
	R4.w[2] = -0.000000000931323;
	R4.tauSys = -0.000000189058483;
	R4.tau = -0.000042061321437;
	R4.gamma = 0.000000000000909;

	// R5
	R5.sv = 5;
	R5.frqNum = 1;
	R5.dne = 578;
	R5.tk = 77400;
	R5.tb = 78300;
	R5.health = 0;
	R5.age = 0;
	R5.flags = 141;
	R5.r[0] = 11406.827148437500000;
	R5.r[1] = 10131.943847656250000;
	R5.r[2] = 20440.770996093750000;
	R5.v[0] = -2.795928955078125;
	R5.v[1] = -0.131600379943848;
	R5.v[2] = 1.625444412231445;
	R5.w[0] = 0.000000000000000;
	R5.w[1] = 0.000000000000000;
	R5.w[2] = -0.000000002793968;
	R5.tauSys = -0.000000189058483;
	R5.tau = 0.000169168226421;
	R5.gamma = 0.000000000000000;

	// R6
	R6.sv = 6;
	R6.frqNum = -4;
	R6.dne = 578;
	R6.tk = 77400;
	R6.tb = 78300;
	R6.health = 0;
	R6.age = 0; 
	R6.flags = 141;
	R6.r[0] = 24342.756347656250000;
	R6.r[1] = 3797.545898437500000;
	R6.r[2] = 6671.118164062500000;
	R6.v[0] = -0.909827232360840;
	R6.v[1] = -0.160531044006348;
	R6.v[2] = 3.404714584350586;
	R6.w[0] = 0.000000000931323;
	R6.w[1] = 0.000000000931323;
	R6.w[2] = -0.000000001862645;
	R6.tauSys = -0.000000189058483;
	R6.tau = -0.000032551586628;
	R6.gamma = 0.000000000000000;

	// R13
	R13.sv = 13;
	R13.frqNum = -2;
	R13.dne = 578;
	R13.tk = 77400;
	R13.tb = 78300;
	R13.health = 0;
	R13.age = 0;
	R13.flags = 141;
	R13.r[0] = -11580.042968750000000;
	R13.r[1] = -855.917968750000000;
	R13.r[2] = 22690.449707031250000;
	R13.v[0] = 1.662919998168945;
	R13.v[1] = -2.636009216308594;
	R13.v[2] = 0.747082710266113;
	R13.w[0] = -0.000000002793968;
	R13.w[1] = -0.000000000931323;
	R13.w[2] = -0.000000000931323;
	R13.tauSys = -0.000000189058483;
	R13.tau = 0.000401012599468;
	R13.gamma = -0.000000000000909;

	// R14
	R14.sv = 14;
	R14.frqNum = -7;
	R14.dne = 578;
	R14.tk = 77400;
	R14.tb = 78300;
	R14.health = 0;
	R14.age = 0;
	R14.flags = 141;
	R14.r[0] = -16050.573242187500000;
	R14.r[1] = 14867.699218750000000;
	R14.r[2] = 13161.539550781250000;
	R14.v[0] = 1.122589111328125;
	R14.v[1] = -1.430501937866211;
	R14.v[2] = 2.971652984619141;
	R14.w[0] = -0.000000001862645;
	R14.w[1] = -0.000000000931323;
	R14.w[2] = 0.000000000000000;
	R14.tauSys = -0.000000189058483;
	R14.tau = 0.000012516044080;
	R14.gamma = -0.000000000000909;

	// R19
	R19.sv = 19;
	R19.frqNum = 3;
	R19.dne = 578;
	R19.tk = 77400;
	R19.tb = 78300;
	R19.health = 0;
	R19.age = 0;
	R19.flags = 141;
	R19.r[0] = 12398.836914062500000;
	R19.r[1] = 22230.053710937500000;
	R19.r[2] = 1671.189941406250000;
	R19.v[0] = 0.273331642150879;
	R19.v[1] = 0.116469383239746;
	R19.v[2] = -3.573365211486816;
	R19.w[0] = 0.000000001862645;
	R19.w[1] = 0.000000000000000;
	R19.w[2] = -0.000000001862645;
	R19.tauSys = -0.000000189058483;
	R19.tau = 0.000065584667027;
	R19.gamma = -0.000000000000909;

	// R20
	R20.sv = 20;
	R20.frqNum = 2;
	R20.dne = 578;
	R20.tk = 77400;
	R20.tb = 78300;
	R20.health = 0;
	R20.age = 0;
	R20.flags = 141;
	R20.r[0] = 14947.758300781250000;
	R20.r[1] = 11321.744628906250000;
	R20.r[2] = 17328.319824218750000;
	R20.v[0] = 1.203867912292480;
	R20.v[1] = 2.046018600463867;
	R20.v[2] = -2.370450973510742;
	R20.w[0] = 0.000000000000000;
	R20.w[1] = 0.000000000000000;
	R20.w[2] = -0.000000002793968;
	R20.tauSys = -0.000000189058483;
	R20.tau = 0.000058603473008;
	R20.gamma = -0.000000000000909;

	// R21
	R21.sv = 21;
	R21.frqNum = 4;
	R21.dne = 578;
	R21.tk = 77400;
	R21.tb = 78300;
	R21.health = 0;
	R21.age = 0;
	R21.flags = 141;
	R21.r[0] = 10180.483886718750000;
	R21.r[1] = -3836.068847656250000;
	R21.r[2] = 23064.704589843750000;
	R21.v[0] = 1.483661651611328;
	R21.v[1] = 2.790823936462402;
	R21.v[2] = -0.199043273925781;
	R21.w[0] = 0.000000000000000;
	R21.w[1] = 0.000000000000000;
	R21.w[2] = -0.000000001862645;
	R21.tauSys = -0.000000189058483;
	R21.tau = 0.000008144415915;
	R21.gamma = -0.000000000000909;

	// R22
	R22.sv = 22;
	R22.frqNum = -3;
	R22.dne = 578;
	R22.tk = 77940;
	R22.tb = 78300;
	R22.health = 0;
	R22.age = 0;
	R22.flags = 140;
	R22.r[0] = -344.439941406250000;
	R22.r[1] = -18270.123046875000000;
	R22.r[2] = 17727.150390625000000;
	R22.v[0] = 1.049692153930664;
	R22.v[1] = 2.198596000671387;
	R22.v[2] = 2.299607276916504;
	R22.w[0] = -0.000000001862645;
	R22.w[1] = 0.000000000000000;
	R22.w[2] = 0.000000000000000;
	R22.tauSys = -0.000000189058483;
	R22.tau = -0.000092483125627;
	R22.gamma = 0.000000000000000;
}